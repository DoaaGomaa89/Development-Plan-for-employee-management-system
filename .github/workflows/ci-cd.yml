name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/employee-backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/employee-frontend

jobs:
  # Backend CI Job
  backend-ci:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run backend tests
      working-directory: ./backend/employee-management-system
      run: mvn clean test
    
    - name: Build backend application
      working-directory: ./backend/employee-management-system
      run: mvn clean package -DskipTests
    
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: backend/employee-management-system/target/*.jar

  # Frontend CI Job
  frontend-ci:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
    
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint
    
    - name: Build frontend application
      working-directory: ./frontend
      run: npm run build
    
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

  # Security Scanning Job
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write  # This permission is required to upload SARIF
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0  # Use specific version
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'  # Scan only critical and high severity vulnerabilities
      
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3  # Use v3, not v4!
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-fs-scan'  # Add category identifier


  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, security-scan]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: backend/employee-management-system/target/
    
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
    
    - name: Build and push backend image
      uses: docker/build-push-action@v6
      with:
        context: ./backend/employee-management-system
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [build-and-push]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: backend/employee-management-system/target/

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

      - name: Start test environment
        run: |
          echo "Starting test environment..."
          docker compose -f docker-compose.test.yml up -d
          echo "Waiting for containers to initialize..."
          sleep 30

      - name: Check container status
        run: |
          echo "=== Container Status ==="
          docker compose -f docker-compose.test.yml ps
          echo ""
          echo "=== Running Containers ==="
          docker ps -a --filter name=employee

      - name: Wait for database
        run: |
          echo "Checking database readiness..."
          for i in {1..20}; do
            if docker compose -f docker-compose.test.yml exec -T postgres pg_isready -U postgres; then
              echo "‚úÖ Database is ready!"
              break
            fi
            echo "Database not ready yet, attempt $i/20..."
            sleep 3
          done

      - name: Wait for backend service
        run: |
          echo "Waiting for backend service..."
          for i in {1..30}; do
            if curl -f -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "‚úÖ Backend health check passed!"
              curl http://localhost:8080/actuator/health
              break
            fi
            echo "Backend not ready yet, attempt $i/30..."
            sleep 10
          done

      - name: Wait for frontend service
        run: |
          echo "Waiting for frontend service..."
          for i in {1..15}; do
            if curl -f -s http://localhost:3000 > /dev/null 2>&1; then
              echo "‚úÖ Frontend is accessible!"
              break
            fi
            echo "Frontend not ready yet, attempt $i/15..."
            sleep 5
          done

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          
          # Test backend health endpoint
          echo "Testing backend health..."
          if curl -f http://localhost:8080/actuator/health; then
            echo "‚úÖ Backend health check successful"
          else
            echo "‚ùå Backend health check failed"
            exit 1
          fi
          
          # Test frontend accessibility
          echo "Testing frontend accessibility..."
          if curl -f http://localhost:3000; then
            echo "‚úÖ Frontend accessibility test successful"
          else
            echo "‚ùå Frontend accessibility test failed"
            exit 1
          fi
          
          echo "üéâ All integration tests passed!"

      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Integration test failed, showing logs ==="
          echo ""
          echo "=== Backend Logs ==="
          docker compose -f docker-compose.test.yml logs backend
          echo ""
          echo "=== Frontend Logs ==="
          docker compose -f docker-compose.test.yml logs frontend
          echo ""
          echo "=== Database Logs ==="
          docker compose -f docker-compose.test.yml logs postgres
          echo ""
          echo "=== Container Status ==="
          docker compose -f docker-compose.test.yml ps

      - name: Cleanup test environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker compose -f docker-compose.test.yml down
          echo "Cleanup completed"

  # Deployment Job (to staging/production)
  deploy:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Image tags available:"
        echo "Backend: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}"
        echo "Frontend: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}"
        # Add your deployment commands here
        # For example, deploy to AWS ECS, Kubernetes, or your preferred platform
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Example smoke test
        # curl -f http://your-staging-url/actuator/health || exit 1
    
    - name: Deployment completed
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful for commit ${{ github.sha }}"
        else
          echo "‚ùå Deployment failed for commit ${{ github.sha }}"
        fi
        echo "Deployment process completed."