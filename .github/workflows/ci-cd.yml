name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/employee-backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/employee-frontend

jobs:
  # Backend CI Job
  backend-ci:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run backend tests
      working-directory: ./backend/employee-management-system
      run: mvn clean test
    
    - name: Build backend application
      working-directory: ./backend/employee-management-system
      run: mvn clean package -DskipTests
    
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: backend/employee-management-system/target/*.jar

  # Frontend CI Job
  frontend-ci:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
    
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint
    
    - name: Build frontend application
      working-directory: ./frontend
      run: npm run build
    
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

  # Security Scanning Job
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Temporarily disabled to isolate artifact issue
    # - name: Run Trivy vulnerability scanner
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     scan-type: 'fs'
    #     scan-ref: '.'
    #     format: 'sarif'
    #     output: 'trivy-results.sarif'
    
    # - name: Upload Trivy scan results
    #   uses: github/codeql-action/upload-sarif@v3
    #   if: always()
    #   with:
    #     sarif_file: 'trivy-results.sarif'
    
    - name: Security scan placeholder
      run: echo "Security scan temporarily disabled for troubleshooting"

  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, security-scan]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: backend/employee-management-system/target/
    
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
    
    - name: Build and push backend image
      uses: docker/build-push-action@v6
      with:
        context: ./backend/employee-management-system
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: backend/employee-management-system/target/

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

      - name: Start test environment
        run: |
          docker compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to be ready

      - name: Run integration tests
        run: |
          # Health check
          curl -f http://localhost:8080/actuator/health || exit 1
          echo "✅ Backend health check passed"
          
          # Frontend check
          curl -f http://localhost:3000 || exit 1
          echo "✅ Frontend health check passed"

      - name: Cleanup test environment
        if: always()
        run: docker compose -f docker-compose.test.yml down

  # Deployment Job (to staging/production)
  deploy:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Image tags available:"
        echo "Backend: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}"
        echo "Frontend: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}"
        # Add your deployment commands here
        # For example, deploy to AWS ECS, Kubernetes, or your preferred platform
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Example smoke test
        # curl -f http://your-staging-url/actuator/health || exit 1
    
    - name: Deployment completed
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful for commit ${{ github.sha }}"
        else
          echo "❌ Deployment failed for commit ${{ github.sha }}"
        fi
        echo "Deployment process completed."